module ComputePmeCUDAMgr {

  extern module CudaPmeSolver;

#if defined(NAMD_CUDA) || defined(NAMD_HIP)
	message PmeAtomMsg {
		CudaAtom atoms[];
                /* These charge factor arrays are used in multiple grids method to implement alchemical transformation.
                 * Atoms in different grids from 1 to 5 corresponds to chargeFactors1 ~ chargeFactors5.
                 * For example, if we have atoms whose indices are from 1 to 9 as following:
                 * 
                 * Atom index:  1 2 3                4 5 6               7 8 9
                 *              =====                =====               =====
                 *              appearing            disappearing        normal
                 * partition:   1                    2                   0
                 * 
                 * Assuming alchFepOn is true, alchDecouple is true and alchElecLambdaStart > 0. Then:
                 * 
                 * Atom index:  1 2 3                4 5 6               7 8 9
                 * factors1:    1 1 1                0 0 0               1 1 1  <= 1 for atoms in partition 0 and 1, 0 for atoms in partition 2
                 * factors2:    0 0 0                1 1 1               1 1 1  <= 1 for atoms in partition 0 and 2, 0 for atoms in partition 1
                 * factors3:    1 1 1                0 0 0               0 0 0  <= only appearing atoms, used when alchDecouple is true
                 * factors4:    0 0 0                1 1 1               0 0 0  <= only disappearing atoms, used when alchDecouple is true
                 * factors5:    1 1 1                0 0 0               0 0 0  <= only non-alchemical atoms, used when alchElecLambdaStart > 0
                 * 
                 * If any of these factors are not used, the length should be zero.
                 */
                float chargeFactors1[];
                float chargeFactors2[];
                float chargeFactors3[];
                float chargeFactors4[];
                float chargeFactors5[];
	};

  message PmeForceMsg {
    // force2 ~ force5 are used in alchemical transformation
    CudaForce force[];
    CudaForce force2[];
    CudaForce force3[];
    CudaForce force4[];
    CudaForce force5[];
  };

  message PmeLaunchMsg;

  message PmeAtomPencilMsg {
    CudaAtom atoms[];
    float chargeFactors1[];
    float chargeFactors2[];
    float chargeFactors3[];
    float chargeFactors4[];
    float chargeFactors5[];
  };

  message PmeForcePencilMsg {
    CudaForce force[];
    CudaForce force2[];
    CudaForce force3[];
    CudaForce force4[];
    CudaForce force5[];
  };

  // Used as per-Pe storage
  group PmeAtomFiler {
    entry PmeAtomFiler();
  };

  // Per node, one per device
  nodegroup ComputePmeCUDADevice {
    entry ComputePmeCUDADevice(void);
    entry void recvAtoms(PmeAtomMsg *msg);
    entry void sendAtomsToNeighbor(int y, int z, int atomIval);
    entry void recvAtomsFromNeighbor(PmeAtomPencilMsg *msg);
    entry void gatherForce();
    entry void recvForcesFromNeighbor(PmeForcePencilMsg *msg);
    entry void mergeForcesOnPatch(int homePatchIndex);
    entry void sendForcesToPatch(PmeForceMsg *forceMsg);
  };

  message RegisterPatchMsg;

  message NumDevicesMsg;

  class CProxy_ComputePmeCUDADevice;
  message RecvDeviceMsg {
    CProxy_ComputePmeCUDADevice dev[];
  };
#endif // NAMD_CUDA

  // Per node manager
  nodegroup ComputePmeCUDAMgr {
#if defined(NAMD_CUDA) || defined(NAMD_HIP)
    entry ComputePmeCUDAMgr(void);
    // entry void initialize(CkQdMsg *); // must run on pe 0 to call ckNew
    entry void initialize_pencils(CkQdMsg *);
    entry void activate_pencils(CkQdMsg *);
    entry void recvPencils(CProxy_CudaPmePencilXYZ xyz);
    entry void recvPencils(CProxy_CudaPmePencilXY xy, CProxy_CudaPmePencilZ z);
    entry void recvPencils(CProxy_CudaPmePencilX x, CProxy_CudaPmePencilY y, CProxy_CudaPmePencilZ z);

    entry void recvDevices(RecvDeviceMsg* msg);
    entry void recvAtomFiler(CProxy_PmeAtomFiler filer);
    entry void skip();

    entry [exclusive] void initializeDevicesAndAtomFiler(NumDevicesMsg *msg) {
      serial {
        if (CkMyNode() != 0)
          NAMD_bug("ComputePmeCUDAMgr::initializeDevicesAndAtomFiler can only be called on root node");
        numNodesContributed++;
        numDevicesMax = (numDevicesMax >= msg->numDevices) ? numDevicesMax : msg->numDevices;
        delete msg;
        if (numNodesContributed == CkNumNodes()) {
          createDevicesAndAtomFiler();
        }
      }
    };

    entry [exclusive] void initializePatches() {
      serial {
        int i;
        for (i=0;i < numDevices;i++) {
          deviceProxy[i][CkMyNode()].ckLocalBranch()->initializePatches(numHomePatchesList[i]);
        }
      }
    };

    // Increase total patch count on node 0
    entry [exclusive] void incTotalPatchCount() {
      serial {
        if (CkMyNode() != 0)
          NAMD_bug("ComputePmeCUDAMgr::incTotalPatchCount can only be called on root node");
        numTotalPatches++;
        if (numTotalPatches == PatchMap::Object()->numPatches()) {
          // Once all patches are accounted for, we call initializePatches on every node
          thisProxy.initializePatches();
        }
      }
    };

    entry [exclusive] void registerPatch(RegisterPatchMsg *msg) {
      serial {
        int device = getDevice(msg->i, msg->j);
        numHomePatchesList[device]++;
        delete msg;
        thisProxy[0].incTotalPatchCount();
      }
    };

    // Registers a neighbor for pencil at (y,z)
    entry void registerNeighbor(int y, int z) {
      serial {
        int device = getDevice(y, z);
        deviceProxy[device].ckLocalBranch()->registerNeighbor();
      }
    };

    // ------------------------------------------------------------------

    entry void recvAtoms(PmeAtomMsg *msg);
    // entry void recvAtoms(PmeAtomMsg *msg) {
    //   serial {
    //     int device = getDevice(msg->i, msg->j);
    //     deviceProxy[device].ckLocalBranch()->recvAtoms(msg);
    //   }
    // };

    entry void recvAtomsFromNeighbor(PmeAtomPencilMsg *msg) {
      serial {
        int device = getDevice(msg->y, msg->z);
        deviceProxy[device].ckLocalBranch()->recvAtomsFromNeighbor(msg);
      }
    };

    entry void recvForcesFromNeighbor(PmeForcePencilMsg *msg) {
      serial {
        int device = getDevice(msg->y, msg->z);
        deviceProxy[device].ckLocalBranch()->recvForcesFromNeighbor(msg);
      }
    };
#endif // NAMD_CUDA
	};

};
